import numpy as np


def levenshtein(string1, string2):
    size_x = len(string1) + 1
    size_y = len(string2) + 1

    matrix = np.zeros((size_x, size_y))

    for x in range(size_x):
        matrix[x, 0] = x
    for y in range(size_y):
        matrix[y, 0] = y

    for x in range(1, size_x):
        for y in range(1, size_y):
            if string1[x - 1] == string2[y - 1]:
                matrix [x, y] = min(
                    matrix[x - 1, y] + 1,
                    matrix[x - 1, y - 1],
                    matrix[x, y - 1] + 1
                )
            else:
                matrix [x, y] = min(
                    matrix[x - 1, y] + 1,
                    matrix[x - 1, y - 1],
                    matrix[x, y - 1] + 1
                )
    print(matrix)
    return matrix[size_x - 1, size_y - 1]


if __name__ == '__main__':

    order_numbers = ['BE 123', 'BE123', '2019123', '123BE', 'BE-2019123', 'BE-123']
    string = 'BE-12345'

    for order_number_outside in order_numbers:
        for order_number_inside in reversed(order_numbers):
            if len(order_number_outside) >= len(order_number_inside):
                distance = levenshtein(order_number_outside, order_number_inside)
            else:
                distance = levenshtein(order_number_inside, order_number_outside)
            if distance < 3:
                print(order_number_outside, ' is compatible with ', order_number_inside, ' with a distance of ', distance)
            else:
                print(order_number_outside, ' is not compatible with ', order_number_inside, ' with a distance of ', distance)
